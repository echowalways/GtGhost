/*!
    \qmltype GhostNode
    \instantiates GGhostNode
    \inqmlmodule GtGhost
    \inherits GhostSourceNode
    \brief GhostNode 是 Gt Ghost 中的基本灵魂节点。

    GhostNode 是 Gt Ghost 中的基本灵魂节点。只有继承自 GhostNode 的对象才可以添加到灵魂树中。
 */

/*!
    \qmlproperty enumeration GtGhost::GhostNode::status

    这个属性掌握着当前节点的状态。

    下面罗列出了所有可能的节点状态：

    \list
    \li \c Ghost.Invalid - 此状态表明节点无法使用。造成这种状态的原因是节点初始化的某些条件不满足。
    \li \c Ghost.StandBy - 此状态表明节点正在待命。首次加载或重置节点都会进入到此状态。
    \li \c Ghost.Running - 此状态表明节点正在运行。
    \li \c Ghost.Success - 此状态表明节点执行成功。
    \li \c Ghost.Failure - 此状态表明节点执行失败。
    \li \c Ghost.Stopped - 此状态表明节点已经停止。
    \endlist

    \note 这个属性是只读属性。
    \sa GhostTree
 */

/*!
    \qmlproperty GhostTree GtGhost::GhostNode::masterTree

    这个属性掌握着当前节点所属的主灵魂树。

    \note 这个属性是只读属性。
 */

/*!
    \qmlproperty GhostNode GtGhost::GhostNode::parentNode

    这个属性掌握着父节点。

    \note 这个属性是只读属性。
 */

/*!
    \qmlproperty enumeration GtGhost::GhostNode::baseType

    这个属性掌握着当前节点的基本类型。

    在 Gt Ghost 中，节点可分为三种基本类型：

    \list
    \li \c Ghost.CompositeNode - 组合型节点类型
    \li \c Ghost.DecoratorNode - 修饰型节点类型
    \li \c Ghost.LeafNode - 子叶型节点类型
    \endlist

    \note 这个属性是只读属性。
 */

/*!
    \qmlproperty enumeration GtGhost::GhostNode::nodeType

    这个属性掌握着当前节点的具体节点类型。

    下面罗列出了所有可能的节点类型：

    \list
    \li \c Ghost.SequenceNode
    \li \c Ghost.SelectorNode
    \li \c Ghost.ParallelNode
    \li \c Ghost.PrioritySequenceNode
    \li \c Ghost.PrioritySelectorNode
    \li \c Ghost.RandomSequenceNode
    \li \c Ghost.RandomSelectorNode
    \li \c Ghost.ParallelSequenceNode - \b 暂不支持
    \li \c Ghost.ParallelSelectorNode - \b 暂不支持
    \li \c Ghost.InverterNode
    \li \c Ghost.RepeaterNode
    \li \c Ghost.ForceSuccessNode
    \li \c Ghost.ForceFailureNode
    \li \c Ghost.RepeatUntilSuccessNode
    \li \c Ghost.RepeatUntilFailureNode
    \li \c Ghost.ActionNode
    \li \c Ghost.ConditionNode
    \li \c Ghost.FreezeNode
    \endlist

    \note 这个属性是只读属性。
 */

/*!
    \qmlproperty list<GhostNode> GtGhost::GhostNode::childNodes

    这个属性掌握着子节点的列表。
 */

/*!
    \qmlproperty string GtGhost::GhostNode::comment

    这个属性掌握着子节点的注释。
 */

/*!
    \qmlproperty var GtGhost::GhostNode::precondition

    这个属性掌握着当前节点执行的前置条件。

    前置条件是判断节点是否执行的先决条件。默认值是 true。如果前置条件的结果为 false，节点直接跳过，不会执行。

    目前接受两种类型作为前置条件：
    \list
    \li 布尔类型 - 接受一个布尔值作为前置条件。
        \code
        import GtGhost 1.0

        GhostTree {
            objectName: "Missile Launcher"

            ActionNode {
                precondition: Radar.isPowerOn

                onExecute: {
                    Missile.launch()
                }
            }
        }
        \endcode
    \li 函数类型 - 接受一个返回布尔值的函数作为前置条件。
        \code
        import GtGhost 1.0

        GhostTree {
            objectName: "Missile Launcher"

            ActionNode {
                precondition: function() {
                    return Radar.isPowerOn && EnemyAircraft.distance < 50km
                }

                onExecute: {
                    Missile.launch()
                }
            }
        }
        \endcode
    \endlist
 */

/*!
    \qmlproperty var GtGhost::GhostNode::weight

    这个属性掌握着当前节点的权重值。

    在某些组合型节点中，子节点的执行顺序是可以动态调整的。而这取决于这些子节点的权重值。
权重值越大，越可能优先执行。反之，权重值越小，越可能推迟执行。权重值的默认值是 1。

    目前接受两种类型作为前置条件：
    \list
    \li 整型类型 - 接受一个整型值作为权重值。
        \code
        import GtGhost 1.0

        GhostTree {
            objectName: "Missile Launcher"

            PrioritySelectorNode {
                ActionNode {
                    objectName: "Short-range Missile"

                    weight: 50
                }

                ActionNode {
                    objectName: "Medium-range Missile"

                    weight: 60
                }
            }
        }
        \endcode
    \li 函数类型 - 接受一个返回整型值的函数作为权重值。
        \code
        import GtGhost 1.0

        GhostTree {
            objectName: "Missile Launcher"

            PrioritySelectorNode {
                ActionNode {
                    objectName: "Short-range Missile"

                    weight: function() {
                        return 50 - EnemyAircraft.distance
                    }
                }

                ActionNode {
                    objectName: "Medium-range Missile"

                    weight: function() {
                        return EnemyAircraft.distance - 30
                    }
                }
            }
        }
        \endcode
    \endlist

    \sa PrioritySelectorNode, PrioritySequenceNode, RandomSelectorNode, RandomSequenceNode

    \note 当权重值的计算结果小于 1 的时候，结果将会被重置到 1。
 */
